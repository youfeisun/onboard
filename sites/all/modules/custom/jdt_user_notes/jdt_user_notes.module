<?php

/**
 * @file
 * The module allows user to add notes into articles.
 */

module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes_curd');

/**
 * Implements hook_permission().
 *
 * Defined permissions for admin and editor.
 */
function jdt_user_notes_permission() {
  return array(
    'administer jdt user notes' => array(
      'title' => t('Adminster JDT user notes.'),
      'restrict access' => TRUE,
      ),
    'editor jdt user notes' => array(
      'title' => t('The permission to access notes only belong to user.'),
      ),
    );
}


/**
 * Implements hook_menu().
 *
 * Added url path for notes CURD.
 */
function jdt_user_notes_menu() {
  global $user;
  $items['node/%jdt_user_notes_loader/jdt_user_notes/%ctools_js/create'] = array(
    'title' => 'New note',
    'page callback' => 'jdt_user_notes_get_create_form_callback',
    'page arguments' => array('jdt_user_notes_create_form', 1,3),
    'access arguments' => array('editor jdt user notes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    );
  $items['node/%jdt_user_notes_loader/jdt_user_notes/view'] = array(
    'title' => 'My notes',
    'page callback' => 'note_display_menu_call_back',
    'page arguments' => array(1),
    'access arguments' => array('editor jdt user notes'),
    'type' => MENU_LOCAL_TASK,
    //'type' => MENU_NORMAL_ITEM,
    'weight' => 6,
    );
  $items['node/%jdt_user_notes_loader/jdt_user_notes/edit'] = array(
    // Interesting happens if I use /edit in the path.  see themecallback
    'title' => 'Edit notes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_edit_form', 1),
    'access arguments' => array('editor jdt user notes'),
    'theme callback' => 'theme_call_back',
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    );
  $items['note/%jdt_user_notes_note_loader/%ctools_js/edit'] = array(
    'title' => 'Note edit',
    'page callback' => 'jdt_user_notes_edit_solely_form_callback',
    'page arguments' => array('jdt_user_notes_edit_solely_form', 1,2),
    'access arguments' => array('editor jdt user notes'),
    'theme callback' => 'theme_call_back',
    );
  $items['note/%jdt_user_notes_note_loader/view'] = array(
    'title' => 'Note view',
    'page callback' => 'jdt_user_notes_single_view_callback',
    'page arguments' => array(1),
    'access arguments' => array('editor jdt user notes'),
    );

  return $items;
}


function theme_call_back(){

  return variable_get('theme_default','garland');
}

/**
 * Detects if the wildcard node ID exists, if not, return a 404 page.
 */
function jdt_user_notes_loader_load($nid) {
  // Might going to need a node type test.
  $return_val = node_load($nid);
  if ($return_val != FALSE) {
    $return_val = $nid;
  }

  return $return_val;
}

function jdt_user_notes_note_loader_load($note_id){
  //todo
  return $note_id;
}

function jdt_user_notes_menu_local_tasks_alter(&$data,$router_item,$root_path){
  /*
  $nid = $router_item['page_arguments'][1];
    // Test if a user has notes on that article in view mode.
  $records = (array) jdt_user_notes_get_note_by_nid($nid);


  if(empty($records)){
    for($x = 0; $x<count($data['tabs'][0]['output']);$x++){
      if($data['tabs'][0]['output'][$x]['#link']['path']==="node/%/jdt_user_notes/view"){
        unset($data['tabs'][0]['output'][$x]);
      }
    }
  }
  */
}

/**
 * Generate the Create Note form.
 */
function jdt_user_notes_create_form($form, &$form_state, $nid) {
  $form = array();
  $form['jdt_user_notes_title_field'] = array(
    '#type' => 'textfield',
    '#title' => t('The note title.'),
    '#description' => t("Maximum 255 characters"),
    '#required' => TRUE,
    );
  $form['jdt_user_notes_note_field'] = array(
    '#type' => 'textarea',
    '#title' => t('The note.'),
    );
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => 'Create Note',
      '#submit' => array('jdt_user_notes_create_form_submit'),
      ),
    );
  // Passing nid in the form.
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
    );
  if ( $form_state['submitted']){
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ctools_ajax_command_redirect('node/'.$nid.'/jdt_user_notes/view');
    print ajax_render($commands);
    exit;
  }

  return $form;
}

/**
 * Handler for submit button in Create note, creates the record in database.
 */
function jdt_user_notes_create_form_submit($form, &$form_state) {
  global $user;
  jdt_user_notes_create_note($user->uid, $form_state['values']['nid'], $form_state['values']['jdt_user_notes_title_field'], $form_state['values']['jdt_user_notes_note_field']);
  $form_state['redirect'] = 'node/' . $form_state['values']['nid'] . '/jdt_user_notes/view';
  $form_state['rebuild'] = TRUE;
}

/**
 * Generate the Read Note form.
 */
function jdt_user_notes_read_form($form, &$form_state, $nid) {
  $form = array();
  $records = jdt_user_notes_get_note_by_nid($nid);

  foreach ($records as $record) {
    // For easiness , used disabled forms for Read notes,
    // better approach will be generating markups for the notes.
    // Maybe the owner of the note should be displayed.
    $user = user_load($record->author_uid);
    $form_name = 'jdt_user_notes_title_field' . $record->note_id;
    $form[$form_name] = array(
      '#type' => 'textfield',
      '#title' => t('The note title.'),
      '#disabled' => TRUE,
      '#default_value' => $record->note_title,
      );

    $form_name = 'jdt_user_notes_text_field' . $record->note_id;
    $form[$form_name] = array(
      '#type' => 'textarea',
      '#title' => t('The note.'),
      '#disabled' => TRUE,
      '#default_value' => $record->note_text,
      );
    $form_name = 'jdt_user_notes_author_field' . $record->note_id;
    $form[$form_name] = array(
      '#type' => 'textfield',
      '#title' => t('The author.'),
      '#disabled' => TRUE,
      '#default_value' => $user->name,
      );

    // Seprater between records.
    $field_name = 'line' . $record->note_id;
    $form[$field_name] = array(
      '#type' => 'item',
      '#markup' => '<hr>',
      );

  }
  return $form;
}

/**
 * Generating the Edit note form. Only the owner or admin can edit the note.
 *
 * Using #name attribute to pass the nid to the submit handler,
 * there should be a better approach, maybe somewhere I can pass an array.
 */
function jdt_user_notes_edit_form($form, &$form_state, $nid) {
  global $user;
  $form = array();
  $records = jdt_user_notes_get_note_by_nid($nid);

  $weight = 0;

  foreach ($records as $record) {
    $is_owner = $record->author_uid == $user->uid;
    $is_admin = user_access('administer jdt user notes');
    $can_edit = $is_owner || $is_admin;

    $field_name = 'jdt_user_notes_title_field' . $record->note_id;
    $form[$field_name] = array(
      '#type' => 'textfield',
      '#title' => t('The note title.'),
      '#disabled' => !$can_edit,
      '#required' => TRUE,
      '#weight' => $weight,
      '#default_value' => $record->note_title,
      );
    $weight++;

    $field_name = 'jdt_user_notes_text_field' . $record->note_id;
    $form[$field_name] = array(
      '#type' => 'textarea',
      '#title' => t('The note.'),
      '#weight' => $weight,
      '#disabled' => !$can_edit,
      '#default_value' => $record->note_text,
      );
    $weight++;

    if (!$can_edit) {
      $field_name = 'info' . $record->note_id;
      $form[$field_name] = array(
        '#type' => 'item',
        '#markup' => t("You are not permitted to edit this note."),
        '#weight' => $weight,
        );
      $weight++;
    }

    $button_name = 'jdt_user_notes_update_button' . $record->note_id;
    $form[$button_name] = array(
      '#type' => 'actions',
      '#weight' => $weight,
      '#disabled' => !$can_edit,
      'submit' => array(
        '#type' => 'submit',
        '#value' => 'Update',
        '#name' => $record->note_id,
        '#submit' => array('jdt_user_notes_update_form_submit'),
        ),
      );
    $weight++;

    $button_name = 'jdt_user_notes_delete_button' . $record->note_id;
    $form[$button_name] = array(
      '#type' => 'actions',
      '#weight' => $weight,
      '#disabled' => !$can_edit,
      'submit' => array(
        '#type' => 'submit',
        '#value' => 'Delete Note',
        '#name' => $record->note_id,
        '#submit' => array('jdt_user_notes_delete_form_submit'),
        ),
      );
    $weight++;

    $field_name = 'line' . $record->note_id;
    $form[$field_name] = array(
      '#type' => 'item',
      '#markup' => '<hr>',
      '#weight' => $weight,
      );
    $weight++;

  }
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
    );
  return $form;
}
function jdt_user_notes_edit_solely_form_callback($form_id,$note_id,$js = FALSE){
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Login'),
      );
    $form_state['build_info']['args'] = array($note_id);
    $output = ctools_modal_form_wrapper($form_id, $form_state);


    if (empty($output)) {
      $output[] = ctools_modal_command_loading();
      $output[] = ctools_ajax_command_redirect('note/' . $note_id . '/edit');
    }
    print ajax_render($output);
    exit;
  }
  else {
    return drupal_get_form($form_id,$note_id);
  }

}

function jdt_user_notes_get_create_form_callback($form_id,$note_id,$js=FALSE){
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Login'),
      );
    $form_state['build_info']['args'] = array($note_id);
    $output = ctools_modal_form_wrapper($form_id, $form_state);


    if (empty($output)) {
      $output[] = ctools_modal_command_loading();
      $output[] = ctools_ajax_command_redirect('node/'.$note_id.'/jdt_user_notes/create');
    }
    print ajax_render($output);
    exit;
  }
  else {
    return drupal_get_form($form_id,$note_id);
  }

}

function jdt_user_notes_edit_solely_form($form, &$form_state, $note_id){
  global $user;
  $form = array();
  $record = jdt_user_notes_read_note($note_id);

  $weight = 0;


  $is_owner = $record->author_uid == $user->uid;
  $is_admin = user_access('administer jdt user notes');
  $can_edit = $is_owner || $is_admin;

  $field_name = 'jdt_user_notes_title_field' . $record->note_id;
  $form[$field_name] = array(
    '#type' => 'textfield',
    '#title' => t('The note title.'),
    '#disabled' => !$can_edit,
    '#required' => TRUE,
    '#weight' => $weight,
    '#default_value' => $record->note_title,
    );
  $weight++;

  $field_name = 'jdt_user_notes_text_field' . $record->note_id;
  $form[$field_name] = array(
    '#type' => 'textarea',
    '#title' => t('The note.'),
    '#weight' => $weight,
    '#disabled' => !$can_edit,
    '#default_value' => $record->note_text,
    );
  $weight++;

  if (!$can_edit) {
    $field_name = 'info' . $record->note_id;
    $form[$field_name] = array(
      '#type' => 'item',
      '#markup' => t("You are not permitted to edit this note."),
      '#weight' => $weight,
      );
    $weight++;
  }

  $button_name = 'jdt_user_notes_update_button' . $record->note_id;
  $form[$button_name] = array(
    '#type' => 'actions',
    '#weight' => $weight,
    '#disabled' => !$can_edit,
    'submit' => array(
      '#type' => 'submit',
      '#value' => 'Update',
      '#name' => $record->note_id,
      '#submit' => array('jdt_user_notes_update_form_submit'),
      ),
    );
  $weight++;

  $button_name = 'jdt_user_notes_delete_button' . $record->note_id;
  $form[$button_name] = array(
    '#type' => 'actions',
    '#weight' => $weight,
    '#disabled' => !$can_edit,
    'submit' => array(
      '#type' => 'submit',
      '#value' => 'Delete Note',
      '#name' => $record->note_id,
      '#submit' => array('jdt_user_notes_delete_form_submit'),
      ),
    );
  $weight++;

  $field_name = 'line' . $record->note_id;
  $form[$field_name] = array(
    '#type' => 'item',
    '#markup' => '<hr>',
    '#weight' => $weight,
    );
  $weight++;

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $record->article_nid,
    );
  if ( $form_state['submitted']){
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ctools_ajax_command_reload();
    print ajax_render($commands);
    exit;
  }
  return $form;
}


/**
 * The Update button handler, which updates the note.
 */
function jdt_user_notes_update_form_submit($form, &$form_state) {
  global $user;

  $note_id = $form_state['triggering_element']['#name'];
  $title_field_name = 'jdt_user_notes_title_field' . $note_id;
  $text_field_name = 'jdt_user_notes_text_field' . $note_id;
  jdt_user_notes_update_note($note_id, $user->uid, $form_state['values']['nid'], $form_state['values'][$title_field_name], $form_state['values'][$text_field_name]);
  $form_state['rebuild'] = TRUE;
}

/**
 * The Delete button handler, which deletes the note.
 */
function jdt_user_notes_delete_form_submit($form, &$form_state) {
  $note_id = $form_state['triggering_element']['#name'];
  jdt_user_notes_delete_note($note_id);
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_theme().
 *
 * List the theme hooks.
 */
function jdt_user_notes_theme(){

  $items['jdt_user_notes_display'] =
     array(
      'variables' => array('#theme' => NULL, 'records' => NULL),
      'template' => 'notes',
      );
  $items['jdt_user_single_note_display'] =
    array(
      'variables' => array('#theme' => NULL, 'record' => NULL),
      );

  return $items;
}

function note_display_menu_call_back($nid){
/*
  $records = jdt_user_notes_get_note_by_nid($nid);

  $render['#records'] = $records;
  $render['#theme'] = 'jdt_user_notes_display';
  return drupal_render($render);
*/
  $output = '';
  $records = jdt_user_notes_get_note_by_nid($nid);
  foreach($records as $record){
    $render['#record'] = $record;
    $render['#theme'] = 'jdt_user_single_note_display';
    $output .= render($render);
  }
  return $output;

/*
  $form = drupal_get_form($form_name,$nid);
  $render['#theme'] = 'jdt_user_notes_display';
  $render['#form'] = $form;
  $display = array();
  $counter = 0;
  foreach ($form as $key => $value) {

    if (strpos($key, 'jdt_user_notes_title') === 0) {
      $display[$counter][0] = $value['#default_value'];
    }
    if (strpos($key, 'jdt_user_notes_text') === 0) {
      $display[$counter][1] = $value['#default_value'];
    }
    if (strpos($key, 'jdt_user_notes_author') === 0) {
      $display[$counter][2] = $value['#default_value'];
    }

    if (strpos($key, 'line') === 0) {
      $counter++;
    }
  }
  $render['#display'] = $display;
*/


}
function jdt_user_notes_single_view_callback($note_id){
  $record  = jdt_user_notes_read_note($note_id);
  $render['#record'] = $record;
  $render['#theme'] = 'jdt_user_single_note_display';
  return drupal_render($render);
}

function jdt_user_notes_node_view_alter(&$build){
  if($build['#bundle'] === 'article'){
   ctools_include('modal');
   ctools_modal_add_js();
   $build['#node']->content['my_additional_field'] = array(
    '#markup' => l('Create new note', 'node/'.$build['#node']->vid
      .'/jdt_user_notes/nojs/create', array(
        'attributes' => array('class' => 'ctools-use-modal'))),
    '#weight' => 0,
    );
 }
}

function jdt_user_notes_block_info(){
  $blocks['onboard_stats']= array(
    'info' => t('Some statistics for site'),
    'cache' => DRUPAL_NO_CACHE,  // only for development use CACHE_PER_ROLE by default

    );
  $blocks['some_test']= array(
    'info' => t('Some test for site'),
    'cache' => DRUPAL_NO_CACHE,  // only for development use CACHE_PER_ROLE by default
    );
  return $blocks;
}

function jdt_user_notes_block_view($delta = ''){
  $blocak = array();
  switch ($delta){
    case 'onboard_stats':
    $block['subject'] = 'The stats for the site';
    $block['content'] = jdt_user_notes_stats_block_content();
    break;
    case 'some_test':
    $block['subject'] = 'Tests';
    $block['content'] = "it's only a test";
    break;
  }
  return $block;
}

function jdt_user_notes_stats_block_content(){
  $output = '';
  $record = db_select('node', 'n')
  ->fields('n')
  ->condition('type', 'article')
  ->execute()
  ->fetchAllAssoc('nid');
  $number_of_articles = count($record);

  $output .= t("<p>The number of articles is: ". $number_of_articles."</p>");

  $record = db_select('jdt_user_notes_table', 't')
  ->fields('t')
  ->execute()
  ->fetchAllAssoc('note_id');
  $number_of_notes = count($record);

  $output .= t("<p>The number of notes is: ". $number_of_notes."</p>");

   $record = db_select('users', 'u')
  ->fields('u')
  ->execute()
  ->fetchAllAssoc('uid');
  $number_of_users = count($record);

  $output .= t("<p>The number of authenticated users is: ". $number_of_users."</p>");

  return $output;
}

function jdt_user_notes_views_api(){
  return array(
    'api' => '3',
    );
}
